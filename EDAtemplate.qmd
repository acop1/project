---
title: "template"
format: html
editor: visual
---

#1. Data Overview Dataset Structure: Check rows, columns, and data types.

Missing Values: Identify and handle missing data.

Basic Statistics: Summary stats (mean, median, min, max, etc.) for numerical variables.

Key Variables to Examine (Depending on Dataset) Match Data: Date, teams, score, venue, competition.

Team Data: Win/loss records, points scored/conceded, penalties.

#2. Univariate Analysis Analyze individual variables to understand distributions.

Numerical Variables Distribution Plots: Histograms, boxplots (e.g., points scored, tackles made).

Key Metrics: Average points per match.

Categorical Variables Bar Charts:

Most frequent match outcomes (win/loss/draw).

Top teams by wins or points.

#3. Bivariate & Multivariate Analysis Examine relationships between variables.

Team Performance Win/Loss vs. Home/Away: Do teams perform better at home?

Score Difference Analysis: How often do matches have close margins?

Points Scored vs. Conceded: Defensive vs. offensive strength.

Correlation Analysis:

Does more possession lead to more points?

Are more penalties associated with losses?

#4. Time-Based Trends Seasonal Performance: Do teams perform better at certain times of the year?

Team Improvement/Decline: Win rate trends over seasons.


```{python loading_packages}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
```

```{python import_data}
rugbyDF = pd.read_csv("data/rugby.csv")
rugbyDF.shape
#(2783, 11)
```

```{python trimming_data}

#only keeping data after 1999
#will create a year col and then trim the data

rugbyDF['year'] = rugbyDF['date'].str[0:4].astype(int)
rugbyDF = rugbyDF[rugbyDF.year > 1998]
rugbyDF.dropna(inplace = True)
rugbyDF.shape
#new shape of dataframe: (1230,12)
```
```{python create_homeWin}
#creating variable to track if home or away team won
#created weights for win, draw, and loss
rugbyDF["homeWin"] = np.where(rugbyDF["home_score"] > rugbyDF["away_score"], 1,0)
rugbyDF["awayWin"] = np.where(rugbyDF["home_score"] < rugbyDF["away_score"], 1,0)

#creating a count var to help with num of games played later on
rugbyDF["count"] = 1

```

```{python col_types}

for cols in rugbyDF.columns:
  print(cols + ": " + (str)(rugbyDF[cols].dtype))

#Since there are 2 numerical cols, i can get summary statistics on them
#year variable will not be taken into account for summary statistics
rugbyDF.describe()
```

We can observe that the mean points scored by the home team was approximately 4.2 higher than the away team. All major quadrants have higher points for home_score than away_score, and the std is also greater.

We also notice that the home team won ~59.6%* o the games contested. 

*This does not account for games that take place in neutral venues.

```{python}
#create diff df by teams, then find the summary statistics for those teams.
unq_hteams = rugbyDF['home_team'].unique()
unq_ateams = rugbyDF['away_team'].unique()
unq_teams = np.unique((unq_hteams, unq_ateams))
unq_teams

#shortens the df to only include awayteam, awaywin or hometeam, homewin
rugbyDFH = rugbyDF[["home_team","homeWin","count"]]
rugbyDFA = rugbyDF[["away_team","awayWin","count"]]

#groups the data by team
groupedH = rugbyDFH.groupby('home_team').sum()
groupedA = rugbyDFA.groupby('away_team').sum()

#renames the axis to the same thing
groupedA = groupedA.rename_axis('team')
groupedH = groupedH.rename_axis('team')

#find team win percentage by away and home 
groupedH["home_win%"] = groupedH["homeWin"]/groupedH["count"]
groupedA["away_win%"] = groupedA["awayWin"]/groupedA["count"]

#renames count so that they dont clash when merging
groupedH = groupedH.rename(columns={'count': 'count_home'})
groupedA = groupedA.rename(columns={'count': 'count_away'})

#merge the data frames
teams = pd.merge(groupedH, groupedA, on='team', how='inner')
teams

```



```{python team_plots}
fig, ax = plt.subplots()

y = np.arange(len(unq_teams))  # Team positions
width = 0.4  # Bar width

plt.barh(y - width/2, teams["home_win%"], width, label='Home Win %')
plt.barh(y + width/2, teams["away_win%"], width, label='Away Win %')
plt.yticks(y, unq_teams)

# Add labels and title
plt.ylabel('Teams')
plt.xlabel('Home Win% and Away Win%')
plt.title('Home and Away Win Percentage By Team')

plt.legend()
fig.tight_layout()
plt.show()
plt.close()
```











